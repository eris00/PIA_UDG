# -*- coding: utf-8 -*-
"""DvanaestaNedelja.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A2Ly9iuC9nvlFUUrmKLl2Ig8i6l8wvzZ

Zadatak 1 Ucitati .csv fajl
"""
#1
import csv

filename = 'vgsales.csv'

with open(filename, 'r') as file:
    reader = csv.DictReader(file)
    data = [row for row in reader]


#2
def calculate_total_sales(data):
    sales_summary = {'NA_Sales': 0, 'EU_Sales': 0, 'JP_Sales': 0, 'Other_Sales': 0}

    for row in data:
        for region in sales_summary.keys():
            sales_summary[region] += float(row[region])

    return sales_summary

total_sales = calculate_total_sales(data)
print(total_sales)


#3
def count_games_by_genre(data):
    genre_count = {}

    for row in data:
        genre = row['Genre']
        if genre not in genre_count:
            genre_count[genre] = 0
        genre_count[genre] += 1

    return genre_count

games_by_genre = count_games_by_genre(data)
print(games_by_genre)


#4
def find_release_years(data):
    min_year = float('inf')
    max_year = float('-inf')

    for row in data:
        try:
            year = int(row['Year'])
        except ValueError:
            continue

        if year < min_year:
            min_year = year
        if year > max_year:
            max_year = year

    return min_year, max_year

earliest_year, latest_year = find_release_years(data)
print( earliest_year)
print(latest_year)


#5
def count_games_by_platform(data):
    platform_count = {}

    for row in data:
        platform = row['Platform']
        if platform not in platform_count:
            platform_count[platform] = 0
        platform_count[platform] += 1

    return platform_count

games_by_platform = count_games_by_platform(data)
print(games_by_platform)


import csv

file = '2019.csv'

#1
with open(file, 'r') as csvfile:
    reader = csv.reader(csvfile)
    header = next(reader)
    data = [row for row in reader]

#2
total_score = 0
for row in data:
    total_score += float(row[2])
average_score = total_score / len(data)
print(average_score)


#3
count = 0
for row in data:
    if float(row[2]) > 7:
        count += 1
print(count)

#4
total_life_expectancy = 0
count = 0
for row in data:
    if float(row[2]) < 5:
        total_life_expectancy += float(row[4])
        count += 1
average_life_expectancy = total_life_expectancy / count
print( average_life_expectancy)

#5

total_generosity = 0
count = 0
for row in data:
    if 5 <= float(row[2]) <= 6:
        total_generosity += float(row[7])
        count += 1
average_generosity = total_generosity / count
print(average_generosity)

"""ZADATAK 4 OOP"""

class Player:
    def __init__(self, x, y, width, height, health):
        self.__x = x
        self.__y = y
        self.__width = width
        self.__height = height
        self.__health = health

    def get_x(self):
        return self.__x

    def set_x(self, x):
        self.__x = x

    def get_y(self):
        return self.__y

    def set_y(self, y):
        self.__y = y

    def get_width(self):
        return self.__width

    def set_width(self, width):
        self.__width = width

    def get_height(self):
        return self.__height

    def set_height(self, height):
        self.__height = height

    def get_health(self):
        return self.__health

    def set_health(self, health):
        if 0 <= health <= 100:
            self.__health = health
        else:
            print("Health mora biti između 0 i 100.")

class Enemy:
    def __init__(self, x, y, width, height, damage):
        self.__x = x
        self.__y = y
        self.__width = width
        self.__height = height
        self.__damage = damage

    def get_x(self):
        return self.__x

    def set_x(self, x):
        self.__x = x

    def get_y(self):
        return self.__y

    def set_y(self, y):
        self.__y = y

    def get_width(self):
        return self.__width

    def set_width(self, width):
        self.__width = width

    def get_height(self):
        return self.__height

    def set_height(self, height):
        self.__height = height

    def get_damage(self):
        return self.__damage

    def set_damage(self, damage):
        if 0 <= damage <= 100:
            self.__damage = damage
        else:
            print("Damage mora biti između 0 i 100.")

def check_collision(player, enemy):
    return (player.get_x() < enemy.get_x() + enemy.get_width() and
            player.get_x() + player.get_width() > enemy.get_x() and
            player.get_y() < enemy.get_y() + enemy.get_height() and
            player.get_y() + player.get_height() > enemy.get_y())

def decrease_health(player, enemy):
    if check_collision(player, enemy):
        player.set_health(player.get_health() - enemy.get_damage())

# Kreiranje objekata
player = Player(10, 10, 50, 50, 100)
enemy1 = Enemy(20, 20, 30, 30, 20)
enemy2 = Enemy(100, 100, 40, 40, 10)

# Provera kolizije i smanjenje health-a
print(player.get_health())  # Ispisuje: 100
decrease_health(player, enemy1)
print(player.get_health())  # Ispisuje: 80
decrease_health(player, enemy2)
print(player.get_health())  # Ispisuje: 80 (nema kolizije sa enemy2)

"""Zadatak 15 Matrice"""

def formiraj_kruznu_matricu(dimenzija):
    matrica = [[0] * dimenzija for i in range(dimenzija)]

    broj = 1
    for sloj in range((dimenzija + 1) // 2):
        # Popuni gornji red
        for i in range(sloj, dimenzija - sloj):
            matrica[sloj][i] = broj
            broj += 1
        # Popuni desnu kolonu
        for i in range(sloj + 1, dimenzija - sloj):
            matrica[i][dimenzija - sloj - 1] = broj
            broj += 1
        # Popuni donji red
        for i in range(sloj + 1, dimenzija - sloj):
            matrica[dimenzija - sloj - 1][dimenzija - i - 1] = broj
            broj += 1
        # Popuni lijevu kolonu
        for i in range(sloj + 1, dimenzija - sloj - 1):
            matrica[dimenzija - i - 1][sloj] = broj
            broj += 1

    return matrica




kruzna_matrica = formiraj_kruznu_matricu(4)
print(kruzna_matrica)