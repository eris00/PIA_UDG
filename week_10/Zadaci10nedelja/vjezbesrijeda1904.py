# -*- coding: utf-8 -*-
"""VjezbeSrijeda1904.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HlB5bI28y8h6Vh1h1S9TXylnn2yJxWBu

Sekcija 3 Zadatak 4, nedelja 7
"""

def ucitaj_gradove(txt_fajl):
    gradovi = []
    with open(txt_fajl, 'r', encoding='utf-8') as f:
        for line in f.readlines():
            drzava, grad, stanovnistvo = line.strip().split(',')
            gradovi.append((grad, int(stanovnistvo)))
    return gradovi

txt_fajl = 'population.txt'
gradovi = ucitaj_gradove(txt_fajl)

def vizualizuj_stanovnistvo_bar(gradovi):
    gradovi_nazivi = [grad for grad, stanovnistvo in gradovi]
    stanovnistvo_broj = [stanovnistvo for grad, stanovnistvo in gradovi]

    plt.figure(figsize=(8, 6))
    plt.bar(gradovi_nazivi, stanovnistvo_broj)
    plt.xlabel('Gradovi')
    plt.ylabel('Broj stanovnika')
    plt.title('Broj stanovnika za svaki grad')
    plt.show()

vizualizuj_stanovnistvo_bar(gradovi)

"""Zadatak kartice, nedelja 8, zadatak 2-9

Prvi dio, kod koji smo realizovali ranije, kreiramo txt fajl sa ispisom da li su kartice validne ili ne
"""

def validate_card(card):
    if len(card) != 16 or card.isnumeric() == False:
        return False
    card = card[::-1]
    digits = list(card)
    for i in range(len(digits)):
        if (i + 1) % 2 == 0:
            temp = str(int(digits[i]) * 2)
            if len(temp) == 2:
                temp = int(temp[0]) + int(temp[1])
            digits[i] = str(temp)
    suma = 0
    for digit in digits:
        suma += int(digit)
    if suma % 10 == 0:
        return True
    else:
        return False
    
with open("kartice.txt") as file:
    kartice = file.read().split("\n")

with open("validirane_kartice.txt", "w") as file:
    for kartica in kartice:
        if validate_card(kartica):
            file.write(kartica + ", Valid\n")
        else:
            file.write(kartica + ", Invalid\n")

"""Citanje fajla validirane_kartice.txt i brojanje validnih i ne validnih """

valid_count = 0
invalid_count = 0

with open("validirane_kartice.txt", "r") as file:
    for line in file:
        if "Valid" in line:
            valid_count += 1
        else:
            invalid_count += 1

"""Importovanje matplotlib biblioteke"""

import matplotlib.pyplot as plt

"""Bar chart validnih i nevalidnih kartica"""

labels = ['Valid', 'Invalid']
counts = [valid_count, invalid_count]

plt.bar(labels, counts)
plt.xlabel('Status kartice')
plt.ylabel('Broj kartica')
plt.title('Broj validnih i nevalidnih kreditnih kartica')

plt.show()

"""Pie chart validnih i nevalidnih kartica"""

labels = ['Valid', 'Invalid']
counts = [valid_count, invalid_count]

plt.figure(figsize=(8, 8))
plt.pie(counts, labels=labels, autopct='%1.1f%%', startangle=90)
plt.title('Broj validnih i nevalidnih kreditnih kartica')
plt.axis('equal')
plt.show()

"""Chat GPT zadatak, automobili, nedelja 8"""

import csv

def ucitaj_podatke(csv_fajl):
    with open(csv_fajl, 'r', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        rows = [row for row in reader]
    return rows

def filter_year(rows, min_year):
    return [row for row in rows if int(row['year']) > min_year]

def prosjecna_cijena_po_marki(rows):
    car_brands = {}
    for row in rows:
        brand = row['brand']
        price = float(row['price'])
        if brand not in car_brands:
            car_brands[brand] = {'sum': price, 'count': 1}
        else:
            car_brands[brand]['sum'] += price
            car_brands[brand]['count'] += 1

    avg_prices = {}
    for brand, data in car_brands.items():
        avg_prices[brand] = data['sum'] / data['count']
    return avg_prices

def top5_boja(rows):
    color_count = {}
    for row in rows:
        color = row['color']
        if color not in color_count:
            color_count[color] = 1
        else:
            color_count[color] += 1

    sorted_colors = sorted(color_count.items(), key=lambda x: x[1], reverse=True)
    return sorted_colors[:5]

def sacuvaj_top5_boja(top_colors, output_file):
    with open(output_file, 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(['color', 'count'])
        writer.writerows(top_colors)

def sortiraj_po_snazi(rows):
    return sorted(rows, key=lambda x: int(x['horsepower']), reverse=True)


rows = ucitaj_podatke('cars.csv')
min_year = int(input("Unesite minimalnu godinu proizvodnje automobila: "))
filtered_rows = filter_year(rows, min_year)
avg_prices = prosjecna_cijena_po_marki(filtered_rows)

print("\nProsječna cijena automobila po marki:")
for brand, avg_price in avg_prices.items():
    print(f"{brand}: {avg_price}")

top_colors = top5_boja(filtered_rows)
sacuvaj_top5_boja(top_colors, 'top5_colors.csv')

sorted_cars = sortiraj_po_snazi(filtered_rows)
print("\nAutomobili sortirani po snazi motora:")
for car in sorted_cars:
    print(car)

import csv

def sacuvaj_prosjecnu_cijenu_po_marki(avg_prices, output_file):
    with open(output_file, 'w', newline='', encoding='utf-8') as f:
        fieldnames = ['brand', 'average_price']
        writer = csv.DictWriter(f, fieldnames=fieldnames)
        writer.writeheader()
        for brand, avg_price in avg_prices.items():
            writer.writerow({'brand': brand, 'average_price': avg_price})


output_file = 'prosjecna_cijena_po_marki.csv'
sacuvaj_prosjecnu_cijenu_po_marki(avg_prices, output_file)

def vizualizuj_prosjecnu_cijenu_po_marki(avg_prices):
    brands = list(avg_prices.keys())
    prices = list(avg_prices.values())

    plt.figure(figsize=(12, 6))
    plt.bar(brands, prices)
    plt.xlabel('Marke automobila')
    plt.ylabel('Prosečna cena')
    plt.title('Prosečna cena automobila po marki')
    plt.xticks(rotation=45)
    plt.show()


vizualizuj_prosjecnu_cijenu_po_marki(avg_prices)

def ucitaj_top_boje(csv_fajl):
    top_colors = []
    with open(csv_fajl, 'r', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for row in reader:
            top_colors.append((row['color'], int(row['count'])))
    return top_colors

csv_fajl = 'top5_colors.csv'
top_colors = ucitaj_top_boje(csv_fajl)

def vizualizuj_top_boje_pie(top_colors):
    colors = [color for color, count in top_colors]
    counts = [count for color, count in top_colors]

    plt.figure(figsize=(8, 8))
    plt.pie(counts, labels=colors, autopct='%1.1f%%', startangle=90)
    plt.title('Top 5 boja automobila')
    plt.axis('equal')
    plt.show()


vizualizuj_top_boje_pie(top_colors)

def vizualizuj_top_boje_bar(top_colors):
    colors = [color for color, count in top_colors]
    counts = [count for color, count in top_colors]

    plt.figure(figsize=(8, 6))
    plt.bar(colors, counts)
    plt.xlabel('Boje')
    plt.ylabel('Broj automobila')
    plt.title('Top 5 boja automobila')
    plt.show()

vizualizuj_top_boje_bar(top_colors)